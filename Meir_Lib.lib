;;; scheme.s
;;; Support for the Scheme compiler
;;; 
;;; Programmer: Mayer Goldberg, 2018

%define T_UNDEFINED 0
%define T_VOID 1
%define T_NIL 2
%define T_INTEGER 3
%define T_FRACTION 4
%define T_BOOL 5
%define T_CHAR 6
%define T_STRING 7
%define T_SYMBOL 8
%define T_CLOSURE 9
%define T_PAIR 10
%define T_VECTOR 11

%define CHAR_NUL 0
%define CHAR_TAB 9
%define CHAR_NEWLINE 10
%define CHAR_PAGE 12
%define CHAR_RETURN 13
%define CHAR_SPACE 32

%define TYPE_BITS 4
%define WORD_SIZE 64


%define MAKE_LITERAL_SYMBOL(string_address) ((string_address - start_of_data) << TYPE_BITS | T_SYMBOL)


%define MAKE_LITERAL(type, lit) ((lit << TYPE_BITS) | type)

%macro ADD_LITERAL_TYPE 2 ; type, lit
    shl %2, TYPE_BITS
    or %2, %1
%endmacro







;;; MY_MAKE_LITERAL target, type, lit
%macro MY_MAKE_LITERAL 3
    push rbx 
    mov rax, %3
    mov rbx,rax
    TYPE rbx
    xor rax,rbx
    or rax, %2
    mov %1, rax
    pop rbx 
%endmacro

%define MAKE_LITERAL_PAIR(car, cdr) (((((car - start_of_data) << ((WORD_SIZE - TYPE_BITS) >> 1)) | (cdr - start_of_data)) << TYPE_BITS) | T_PAIR)

%define MAKE_LITERAL_FRACTION(numerator, denominator) (((((numerator - start_of_data) << ((WORD_SIZE - TYPE_BITS) >> 1)) | (denominator - start_of_data)) << TYPE_BITS) | T_FRACTION)


;;; MY_MAKE_LITERAL_FRACTION address-target, address-numerator, address-denominator
%macro MY_MAKE_LITERAL_FRACTION 3
    push rax 
    push rbx 
    mov rax, %1 
    mov qword [rax], %2
    sub qword [rax], start_of_data
    shl qword [rax], ((WORD_SIZE - TYPE_BITS) >> 1) 
    mov rbx, %3 
    sub rbx, start_of_data
    or qword [rax], rbx 
    shl qword [rax], TYPE_BITS 
    or qword [rax], T_FRACTION 
    pop rbx 
    pop rax 
%endmacro

%macro MALLOC_THREE_ADDRESSES_FRACTION 2 ; value1,value2
    PUSH_R8_R15
    push rdi
    mov rdi,8
    MY_MALLOC r11
    mov qword[r11], %1
    push r11
    mov rdi,8
    MY_MALLOC r12
    mov qword[r12], %2
    push r12
    mov rdi, 8 ; size for malloc
    MY_MALLOC r15 ;r15 hold the fraction
    pop r12
    pop r11
    MY_MAKE_LITERAL_FRACTION r15, r11, r12 ;target-address,numerator-address,denominator-address
    mov rax,r15
    pop rdi
    POP_R8_R15
%endmacro
    


%macro FRAC_CONVERTER 1
    PUSH_R8_R15
    push rbx
    push rdi
    mov rbx, %1
    TYPE rbx
    cmp rbx, T_FRACTION
    je %%else_frac_converter
    
    mov rbx, %1
    push rbx
    
    mov rdi,8
    MY_MALLOC r11
    pop rbx
    mov [r11], rbx
    push r11
    mov rdi,8
    MY_MALLOC r12 
    mov r11,1
    ADD_LITERAL_TYPE T_INTEGER,r11
    mov qword[r12], r11
    push r12
    mov rdi, 8 ; size for malloc
    MY_MALLOC r15 ;r15 hold the fraction
    pop r12
    pop r11
    MY_MAKE_LITERAL_FRACTION r15, r11, r12 ;target-address,numerator-address,denominator-address
    mov rax, [r15]
    jmp %%end_frac_converter
    %%else_frac_converter:
    mov rax, %1
    %%end_frac_converter:
    pop rdi
    pop rbx
    POP_R8_R15
%endmacro

;(x/y + a/b) = (x*b + a*y)/(y*b)
%macro MY_PLUS_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
	
    mov rax, r8 
    IMUL r11 ; x*b
    mov r12,rax ; r12=x*b
	
    mov rax, r9 
    IMUL r10 ; a*y
    mov r13,rax ; r13=a*y
	
    mov rax, r9 
    IMUL r11 ; y*b
    mov r14,rax ; r14=y*b
	
    ADD_LITERAL_TYPE T_INTEGER, r14
    add r12,r13 ; r12=(x*b + a*y)
    ADD_LITERAL_TYPE T_INTEGER, r12
	
    push r14    ; denominator
    push r12    ; numerator
    
    mov rdi,8
    MY_MALLOC r11
    pop r12
    mov [r11], r12
    push r11 ;r11 numerator-address
    mov rdi,8
    MY_MALLOC r12
    pop r11
    pop r14
    mov [r12], r14 ;r12 denominator-address
    push r12
    push r11
    mov rdi, 8 ; size for malloc
    MY_MALLOC r15 ;r15 hold the fraction
    pop r11
    pop r12
    MY_MAKE_LITERAL_FRACTION r15, r11, r12 ;target-address,numerator-address,denominator-address
    mov rax,[r15]
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro

;(x/y > a/b) <=> (x*b > a*y)
%macro GREATER_THAN_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
	
    mov rax, r8 
    IMUL r11 ; x*b
    mov r12,rax ; r12=x*b
	
    mov rax, r9 
    IMUL r10 ; a*y
    mov r13,rax ; r13=a*y
        
    cmp r12,r13
    jg %%IS_GREATER_THAN_FRACTION
    
    mov rax,[sobFalse]
    jmp %%END_GREATER_THAN_FRACTION
    
    %%IS_GREATER_THAN_FRACTION:
    mov rax,[sobTrue]
    
    %%END_GREATER_THAN_FRACTION:
   
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro

;(x/y < a/b) <=> (x*b < a*y)
%macro SMALLER_THAN_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
	
    mov rax, r8 
    IMUL r11 ; x*b
    mov r12,rax ; r12=x*b
	
    mov rax, r9 
    IMUL r10 ; a*y
    mov r13,rax ; r13=a*y
        
    cmp r12,r13
    jl %%IS_SMALLER_THAN_FRACTION
    
    mov rax,[sobFalse]
    jmp %%END_SMALLER_THAN_FRACTION
    
    %%IS_SMALLER_THAN_FRACTION:
    mov rax,[sobTrue]
    
    %%END_SMALLER_THAN_FRACTION:
   
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro


;(x/y == a/b) <=> (x*b == a*y)
%macro EQUIVALENT_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
	
    mov rax, r8 
    IMUL r11 ; x*b
    mov r12,rax ; r12=x*b
	
    mov rax, r9 
    IMUL r10 ; a*y
    mov r13,rax ; r13=a*y
        
    cmp r12,r13
    je %%IS_EQUIVALENT_FRACTION
    
    mov rax,[sobFalse]
    jmp %%END_EQUIVALENT_FRACTION
    
    %%IS_EQUIVALENT_FRACTION:
    mov rax,[sobTrue]
    
    %%END_EQUIVALENT_FRACTION:
   
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro

;((x/y) * (a/b)) = (x*a)/(y*b)
%macro MY_MULT_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
    
    mov rax, r8 
    IMUL r10 ; x*a
    mov r8,rax ; r8=x*a
	
    mov rax, r9 
    IMUL r11 ; y*b
    mov r9,rax ; r9=y*b

    ADD_LITERAL_TYPE T_INTEGER, r9

    ADD_LITERAL_TYPE T_INTEGER, r8
	
    push r9    ; denominator
    push r8    ; numerator
    
    mov rdi,8
    MY_MALLOC r11
    pop r8
    mov [r11], r8
    push r11 ;r11 numerator-address
    mov rdi,8
    MY_MALLOC r8
    pop r11
    pop r9
    mov [r8], r9 ;r8 denominator-address
    push r8
    push r11
    mov rdi, 8 ; size for malloc
    MY_MALLOC r15 ;r15 hold the fraction
    pop r11
    pop r8
    MY_MAKE_LITERAL_FRACTION r15, r11, r8 ;target-address,numerator-address,denominator-address
    mov rax,[r15]
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro


;((x/y) / (a/b)) = ((x/y) * (b/a)) = (x*b) / (y*a) 
%macro MY_DIV_FRACTION 2
    push rbx
    push rdx
    push rdi
    PUSH_R8_R15
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    mov r10,%2 ;r10=a
    FRACTION_NOMENATOR r10
    DATA r10
    mov r11,%2 ;r11=b
    FRACTION_DENOMINATOR r11
    DATA r11
    
    TEST:
    
    mov rax, r8 
    IMUL r11 ; x*b
    mov r8,rax ; r8=x*b
	
    mov rax, r9 
    IMUL r10 ; y*a
    mov r9,rax ; r9=y*a
    
    
    ADD_LITERAL_TYPE T_INTEGER, r9

    ADD_LITERAL_TYPE T_INTEGER, r8
	
    push r9    ; denominator
    push r8    ; numerator
    
    mov rdi,8
    MY_MALLOC r11
    pop r8
    mov [r11], r8
    push r11 ;r11 numerator-address
    mov rdi,8
    MY_MALLOC r8
    pop r11
    pop r9
    mov [r8], r9 ;r8 denominator-address
    push r8
    push r11
    mov rdi, 8 ; size for malloc
    MY_MALLOC r15 ;r15 hold the fraction
    pop r11
    pop r8
    MY_MAKE_LITERAL_FRACTION r15, r11, r8 ;target-address,numerator-address,denominator-address
    mov rax,[r15]
    POP_R8_R15
    pop rdi
    pop rdx
    pop rbx
%endmacro

%macro TRY_INTEGER_CONVERTION 1 ; x/y
;;Signed divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder.
    PUSH_R8_R15
    push rdx
    push rbx
    push rcx
    
    mov r8,%1 ;r8=x
    FRACTION_NOMENATOR r8
    DATA r8
    mov r9,%1  ;r9=y
    FRACTION_DENOMINATOR r9
    DATA r9
    
    cmp r9, 0
    jg %%NO_NEED_TO_MUL_NOMENATOR_BY_NEG
    neg r9 
    neg r8
    
	
    %%NO_NEED_TO_MUL_NOMENATOR_BY_NEG:
    mov rax,r8
    cqo
    mov rcx,r9
    idiv rcx ; rax- result , rdx - reminder
    cmp edx, 0
    je %%NO_REMINDER
    
    push r8
    push r9
    call gcd ;rax contains gcd
    pop r9
    pop r8

    mov r10,rax
    mov rax,r8
    cqo
    mov rcx,r10
    idiv rcx; r8/rax -> rax
    mov r8, rax

    ADD_LITERAL_TYPE T_INTEGER, r8
    
    mov rax,r9
    cqo
    mov rcx,r10
    idiv rcx; r9/rax -> rax
    mov r9, rax
    
    
    
    ADD_LITERAL_TYPE T_INTEGER, r9
    
    MALLOC_THREE_ADDRESSES_FRACTION r8, r9
    mov rax,[rax]
    jmp %%END_INTEGER_CONVERTION

    %%NO_REMINDER:
    ADD_LITERAL_TYPE T_INTEGER,rax
    %%END_INTEGER_CONVERTION:
	pop rcx
    pop rbx
    pop rdx
    POP_R8_R15
%endmacro

%macro TYPE 1
	and %1, ((1 << TYPE_BITS) - 1) 
%endmacro

%macro DATA 1
	sar %1, TYPE_BITS
%endmacro

%macro DATA_UPPER 1
	sar %1, (((WORD_SIZE - TYPE_BITS) >> 1) + TYPE_BITS)
%endmacro

%macro DATA_LOWER 1
	sal %1, ((WORD_SIZE - TYPE_BITS) >> 1)
	DATA_UPPER %1
%endmacro




%macro CAR 1
	DATA_UPPER %1
	add %1, start_of_data
	mov %1, qword [%1]
%endmacro

%macro CDR 1
	DATA_LOWER %1
	add %1, start_of_data
	mov %1, qword [%1]
%endmacro

;;; MY_MALLOC target (doesn't use pointers)
%macro MY_MALLOC 1
	call malloc
	mov %1 , rax
%endmacro

;;; MY_MALLOC Target and RDI is the size
;%macro MY_MALLOC 1	
;	push rbx				;save rbx
;	mov rbx, malloc_pointer ;the location of the pointer to the free address
;	mov rax, qword [rbx]	;the address which is allocated
;	add qword [rbx], rdi	;advance the pointer to the next free location
;	mov %1 , rax			;put in the target the allocated address
;	pop rbx					;return rbx to its original value
;%endmacro




%macro PUSH_ALL_BUT_RAX 0
        push rbx
        push rcx
        push rdx
        push rsi
        push rdi
%endmacro

%macro POP_ALL_BUT_RAX 0
        pop rdi
        pop rsi
        pop rdx
        pop rcx
        pop rbx
%endmacro

%macro PUSH_R8_R15 0
        push r8
        push r9
        push r10
        push r11
        push r12
        push r13
        push r14
        push r15
%endmacro

%macro POP_R8_R15 0
        pop r15
        pop r14
        pop r13
        pop r12
        pop r11
        pop r10
        pop r9
        pop r8
%endmacro

%macro START_FUNC 0
        push rbp
        mov rbp, rsp
%endmacro

%macro END_FUNC 0
        leave
        ret
%endmacro


;;; MAKE_LITERAL_CLOSURE target, env, code
%macro MAKE_LITERAL_CLOSURE 3
	push rax
	push rbx
	mov rax, %1
	mov qword [rax], %2
        sub qword [rax], start_of_data
	shl qword [rax], ((WORD_SIZE - TYPE_BITS) >> 1)
	lea rbx, [rax + 8]
        sub rbx, start_of_data
	or qword [rax], rbx
	shl qword [rax], TYPE_BITS
	or qword [rax], T_CLOSURE
	mov qword [rax + 8], %3
	pop rbx
	pop rax
%endmacro


;;; MAKE_MALLOC_LITERAL_PAIR target-address, car-address, cdr-address
%macro MAKE_MALLOC_LITERAL_PAIR 3
    push rax 
    push rbx 
    mov rax, %1 
    mov qword [rax], %2
    sub qword [rax], start_of_data
    shl qword [rax], ((WORD_SIZE - TYPE_BITS) >> 1) 
    mov rbx, %3 
    sub rbx, start_of_data
    or qword [rax], rbx 
    shl qword [rax], TYPE_BITS 
    or qword [rax], T_PAIR 
    pop rbx 
    pop rax 
%endmacro








%macro CLOSURE_ENV 1
	DATA_UPPER %1
	add %1, start_of_data
%endmacro

%macro CLOSURE_CODE 1
	DATA_LOWER %1
	add %1, start_of_data
	mov %1, qword [%1]
%endmacro



%macro FRACTION_NOMENATOR 1
	DATA_UPPER %1
	add %1, start_of_data
        mov %1, qword [%1]
%endmacro

%macro FRACTION_DENOMINATOR 1
	DATA_LOWER %1
	add %1, start_of_data
	mov %1, qword [%1]
%endmacro

%macro MAKE_LITERAL_STRING 1+
	dq (((((%%LstrEnd - %%Lstr) << ((WORD_SIZE - TYPE_BITS) >> 1)) | (%%Lstr - start_of_data)) << TYPE_BITS) | T_STRING)
	%%Lstr:
	db %1
	%%LstrEnd:
%endmacro

%macro STRING_LENGTH 1
	DATA_UPPER %1
%endmacro

%macro STRING_ELEMENTS 1
	DATA_LOWER %1
	add %1, start_of_data
%endmacro

;;; STRING_REF dest, src, index
;;; dest cannot be RAX! (fix this!)
%macro STRING_REF 3
	push rax
	mov rax, %2
	STRING_ELEMENTS rax
	add rax, %3
	mov %1, byte [rax]
	pop rax
%endmacro


%macro MAKE_LITERAL_VECTOR 0
dq MAKE_LITERAL(T_VECTOR,0)
%endmacro


%macro MAKE_LITERAL_VECTOR 1+
	dq ((((((%%VecEnd - %%Vec) >> 3) << ((WORD_SIZE - TYPE_BITS) >> 1)) | (%%Vec - start_of_data)) << TYPE_BITS) | T_VECTOR)
	%%Vec:
	dq %1
	%%VecEnd:
%endmacro

%macro VECTOR_LENGTH 1
	DATA_UPPER %1
%endmacro

%macro VECTOR_ELEMENTS 1
	DATA_LOWER %1
	add %1, start_of_data
%endmacro

;;; VECTOR_REF dest, src, index
;;; dest cannot be RAX! (fix this!)
%macro VECTOR_REF 3
	mov %1, %2
	VECTOR_ELEMENTS %1
	lea %1, [%1 + %3*8]
	mov %1, qword [%1]
	mov %1, qword [%1]
%endmacro

%define SOB_UNDEFINED MAKE_LITERAL(T_UNDEFINED, 0)
%define SOB_VOID MAKE_LITERAL(T_VOID, 0)
%define SOB_FALSE MAKE_LITERAL(T_BOOL, 0)
%define SOB_TRUE MAKE_LITERAL(T_BOOL, 1)
%define SOB_NIL MAKE_LITERAL(T_NIL, 0)

section .data

section .bss


extern exit, printf, scanf
global main, write_sob, write_sob_if_not_void
;malloc_pointer: resq 1
;start_of_malloc: resb 1024*1024*1024
section .text

gcd:
    START_FUNC
	mov edx, 0
	mov eax, [rbp + 8*2] ; first
	mov ebx, [rbp + 8*3] ; second
	mov ecx, eax ;store eax in ecx
	neg eax
	cmovl eax, ecx ;if eax is now negative, restore its saved value
	mov ecx, ebx
	neg ebx
	cmovl ebx, ecx
	cmp eax, ebx
	jge .loop
	xchg eax, ebx
	
.loop:
	cmp ebx, 0
	je .done
	mov edx, 0
	div ebx
	mov eax, ebx
	mov ebx, edx
	jmp .loop

.done:
	END_FUNC



MY_ADD_NODE:
        START_FUNC
        mov rsi, qword[rbp + 8 + 1*8] ; get the symbol to add to the link
        push rsi
        mov rdi,16
        MY_MALLOC rax
        pop rsi
        mov [rax], rsi
        add rax,8
        mov rdi,[my_symbols_link]
        mov [rax], rdi
        sub rax,8
        mov [my_symbols_link],rax
        END_FUNC

MY_NEXT_NODE: ;rax will save the next node
        START_FUNC
        mov rax, [my_symbols_link]
        add rax,8
        mov rax ,[rax]
        END_FUNC
        
CREATE_SYMBOL: ;rax will save the new symbol
        START_FUNC
        mov rsi, qword[rbp + 8 + 1*8] ; get the string for the symbol
        push rsi ;save the sobString
        mov rdi,8
        MY_MALLOC rax
        pop rsi
        mov [rax],rsi
        sub rax, start_of_data
        ADD_LITERAL_TYPE T_SYMBOL ,rax
        END_FUNC


list_length_asm:
        START_FUNC
        mov rsi, qword[rbp + 8 + 1*8] ;get the list
        xor rdi,rdi, ; rdi will save the list length
        cmp rsi, [sobNil]
        je .end_loop
.loop:
        ;push rsi
        ;CAR rsi
        ;add rsi ,start_of_data
        cmp rsi , [sobNil]
        ;pop rsi
        je .end_loop
        inc rdi
        CDR rsi
        ;add rsi ,start_of_data
        jmp .loop
.end_loop:
        mov rax, rdi
        END_FUNC
        

write_sob_undefined:
	push rbp
	mov rbp, rsp

	mov rax, 0
	mov rdi, .undefined
	call printf

	leave
	ret

section .data
.undefined:
	db "#<undefined>", 0

write_sob_integer:
	push rbp
	mov rbp, rsp

	mov rsi, qword [rbp + 8 + 1*8]
	sar rsi, TYPE_BITS
	mov rdi, .int_format_string
	mov rax, 0
	call printf

	leave
	ret

section .data
.int_format_string:
	db "%ld", 0

write_sob_char:
	push rbp
	mov rbp, rsp

	mov rsi, qword [rbp + 8 + 1*8]
	DATA rsi

	cmp rsi, CHAR_NUL
	je .Lnul

	cmp rsi, CHAR_TAB
	je .Ltab

	cmp rsi, CHAR_NEWLINE
	je .Lnewline

	cmp rsi, CHAR_PAGE
	je .Lpage

	cmp rsi, CHAR_RETURN
	je .Lreturn

	cmp rsi, CHAR_SPACE
	je .Lspace
	jg .Lregular

	mov rdi, .special
	jmp .done	

.Lnul:
	mov rdi, .nul
	jmp .done

.Ltab:
	mov rdi, .tab
	jmp .done

.Lnewline:
	mov rdi, .newline
	jmp .done

.Lpage:
	mov rdi, .page
	jmp .done

.Lreturn:
	mov rdi, .return
	jmp .done

.Lspace:
	mov rdi, .space
	jmp .done

.Lregular:
	mov rdi, .regular
	jmp .done

.done:
	mov rax, 0
	call printf

	leave
	ret

section .data
.space:
	db "#\space", 0
.newline:
	db "#\newline", 0
.return:
	db "#\return", 0
.tab:
	db "#\tab", 0
.page:
	db "#\page", 0
.nul:
	db "#\nul", 0
.special:
	db "#\x%02x", 0
.regular:
	db "#\%c", 0

write_sob_void:
	push rbp
	mov rbp, rsp

;	mov rax, 0
;	mov rdi, .void
;	call printf

	leave
	ret

section .data
.void:
	db "#<void>", 0
	
write_sob_bool:
	push rbp
	mov rbp, rsp

	mov rax, qword [rbp + 8 + 1*8]
	cmp rax, SOB_FALSE
	je .sobFalse
	
	mov rdi, .true
	jmp .continue

.sobFalse:
	mov rdi, .false

.continue:
	mov rax, 0
	call printf	

	leave
	ret

section .data			
.false:
	db "#f", 0
.true:
	db "#t", 0

write_sob_nil:
	push rbp
	mov rbp, rsp

	mov rax, 0
	mov rdi, .nil
	call printf

	leave
	ret

section .data
.nil:
	db "()", 0

write_sob_string:
	push rbp
	mov rbp, rsp

	mov rax, 0
	mov rdi, .double_quote
	call printf

	mov rax, qword [rbp + 8 + 1*8]
	mov rcx, rax
	STRING_LENGTH rcx
	STRING_ELEMENTS rax

.loop:
	cmp rcx, 0
	je .done
	mov bl, byte [rax]
	and rbx, 0xff

	cmp rbx, CHAR_TAB
	je .ch_tab
	cmp rbx, CHAR_NEWLINE
	je .ch_newline
	cmp rbx, CHAR_PAGE
	je .ch_page
	cmp rbx, CHAR_RETURN
	je .ch_return
	cmp rbx, CHAR_SPACE
	jl .ch_hex
	
	mov rdi, .fs_simple_char
	mov rsi, rbx
	jmp .printf
	
.ch_hex:
	mov rdi, .fs_hex_char
	mov rsi, rbx
	jmp .printf
	
.ch_tab:
	mov rdi, .fs_tab
	mov rsi, rbx
	jmp .printf
	
.ch_page:
	mov rdi, .fs_page
	mov rsi, rbx
	jmp .printf
	
.ch_return:
	mov rdi, .fs_return
	mov rsi, rbx
	jmp .printf

.ch_newline:
	mov rdi, .fs_newline
	mov rsi, rbx

.printf:
	push rax
	push rcx
	mov rax, 0
	call printf
	pop rcx
	pop rax

	dec rcx
	inc rax
	jmp .loop

.done:
	mov rax, 0
	mov rdi, .double_quote
	call printf

	leave
	ret
section .data
.double_quote:
	db '"', 0
.fs_simple_char:
	db "%c", 0
.fs_hex_char:
	db "\x%01x;", 0	
.fs_tab:
	db "\t", 0
.fs_page:
	db "\f", 0
.fs_return:
	db "\r", 0
.fs_newline:
	db "\n", 0

write_sob_pair:
	push rbp
	mov rbp, rsp

	mov rax, 0
	mov rdi, .open_paren
	call printf
	mov rax, qword [rbp + 8 + 1*8]
	CAR rax
	push rax
	call write_sob
	add rsp, 1*8
	mov rax, qword [rbp + 8 + 1*8]
	CDR rax
	push rax
	call write_sob_pair_on_cdr
	add rsp, 1*8
	mov rdi, .close_paren
	mov rax, 0
	call printf

	leave
	ret

section .data
.open_paren:
	db "(", 0
.close_paren:
	db ")", 0

write_sob_pair_on_cdr:
	push rbp
	mov rbp, rsp

	mov rbx, qword [rbp + 8 + 1*8]
	mov rax, rbx
	TYPE rbx
	cmp rbx, T_NIL
	je .done
	cmp rbx, T_PAIR
	je .cdrIsPair
	push rax
	mov rax, 0
	mov rdi, .dot
	call printf
	call write_sob
	add rsp, 1*8
	jmp .done

.cdrIsPair:
	mov rbx, rax
	CDR rbx
	push rbx
	CAR rax
	push rax
	mov rax, 0
	mov rdi, .space
	call printf
	call write_sob
	add rsp, 1*8
	call write_sob_pair_on_cdr
	add rsp, 1*8

.done:
	leave
	ret

section .data
.space:
	db " ", 0
.dot:
	db " . ", 0

write_sob_vector:
	push rbp
	mov rbp, rsp

	mov rax, 0
	mov rdi, .fs_open_vector
	call printf

	mov rax, qword [rbp + 8 + 1*8]
	mov rcx, rax
	VECTOR_LENGTH rcx
	cmp rcx, 0
	je .done
	VECTOR_ELEMENTS rax

	push rcx
	push rax
	mov rax, qword [rax]
	push qword [rax]
	call write_sob
	add rsp, 1*8
	pop rax
	pop rcx
	dec rcx
	add rax, 8

.loop:
	cmp rcx, 0
	je .done

	push rcx
	push rax
	mov rax, 0
	mov rdi, .fs_space
	call printf
	
	pop rax
	push rax
	mov rax, qword [rax]
	push qword [rax]
	call write_sob
	add rsp, 1*8
	pop rax
	pop rcx
	dec rcx
	add rax, 8
	jmp .loop

.done:
	mov rax, 0
	mov rdi, .fs_close_vector
	call printf

	leave
	ret

section	.data
.fs_open_vector:
	db "#(", 0
.fs_close_vector:
	db ")", 0
.fs_space:
	db " ", 0


section .data

write_sob_symbol:
	push rbp
	mov rbp, rsp

	mov rax, qword [rbp + 8 + 1*8]
	DATA rax
	add rax,start_of_data
	mov rax, [rax]
	mov rcx, rax
	STRING_LENGTH rcx
	STRING_ELEMENTS rax

.loop:
	cmp rcx, 0
	je .done
	mov bl, byte [rax]
	and rbx, 0xff

	cmp rbx, CHAR_TAB
	je .ch_tab
	cmp rbx, CHAR_NEWLINE
	je .ch_newline
	cmp rbx, CHAR_PAGE
	je .ch_page
	cmp rbx, CHAR_RETURN
	je .ch_return
	cmp rbx, CHAR_SPACE
	jl .ch_hex
	
	mov rdi, .fs_simple_char
	mov rsi, rbx
	jmp .printf
	
.ch_hex:
	mov rdi, .fs_hex_char
	mov rsi, rbx
	jmp .printf
	
.ch_tab:
	mov rdi, .fs_tab
	mov rsi, rbx
	jmp .printf
	
.ch_page:
	mov rdi, .fs_page
	mov rsi, rbx
	jmp .printf
	
.ch_return:
	mov rdi, .fs_return
	mov rsi, rbx
	jmp .printf

.ch_newline:
	mov rdi, .fs_newline
	mov rsi, rbx

.printf:
	push rax
	push rcx
	mov rax, 0
	call printf
	pop rcx
	pop rax

	dec rcx
	inc rax
	jmp .loop

.done:

	leave
	ret
	
	
section .data
.double_quote:
	db '"', 0
.fs_simple_char:
	db "%c", 0
.fs_hex_char:
	db "\x%01x;", 0	
.fs_tab:
	db "\t", 0
.fs_page:
	db "\f", 0
.fs_return:
	db "\r", 0
.fs_newline:
	db "\n", 0
	
write_sob_fraction:
	push rbp
	mov rbp, rsp

	mov rax, qword [rbp + 8 + 1*8]
	FRACTION_NOMENATOR rax
	push rax
	call write_sob
	add rsp, 1*8
	mov rax, 0
	mov rdi, .fs_divide
	call printf
	mov rax, qword [rbp + 8 + 1*8]
	FRACTION_DENOMINATOR rax
	push rax
	call write_sob
	add rsp, 1*8
	leave
	ret

section .data
.fs_divide:
	db "/", 0

write_sob_closure:
	push rbp
	mov rbp, rsp
	mov rsi, qword [rbp + 8 + 1*8]
	mov rdx, rsi
	CLOSURE_ENV rsi
	CLOSURE_CODE rdx
	mov rdi, .closure
	mov rax, 0
	call printf
	leave
	ret
section .data
.closure:
	db "#<closure [env:%p, code:%p]>", 0
		


write_sob:
	mov rax, qword [rsp + 1*8]
	TYPE rax
	jmp qword [.jmp_table + rax * 8]

section .data
.jmp_table:
	dq write_sob_undefined, write_sob_void, write_sob_nil
	dq write_sob_integer, write_sob_fraction, write_sob_bool
	dq write_sob_char, write_sob_string, write_sob_symbol
	dq write_sob_closure, write_sob_pair, write_sob_vector

section .text
write_sob_if_not_void:
	mov rax, qword [rsp + 1*8]
	cmp rax, SOB_VOID
	je .continue

	push rax
	call write_sob
	add rsp, 1*8
	mov rax, 0
	mov rdi, .newline
	call printf
	
.continue:
	ret
section .data
.newline:
	db CHAR_NEWLINE, 0
	
	